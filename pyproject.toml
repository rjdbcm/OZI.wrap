# Part of OZI.wrap.
# See LICENSE.txt in the project root for details.
[project]
authors = [{name = "Ross J. Duff MSc", email = "['help@oziproject.dev']"}]
dynamic = ["dependencies", "version"]
license = {file = "LICENSE.txt"}
readme  = "README.rst"

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.in"] }

[project.optional_dependencies] # also meson test suite names
# OZI Packaging Dependencies
# Default meson test setup
dev  = ["[dist,docs,lint,test]"]
## Packaging Setup
dist = [
    "pyc_wheel",
    "python-semantic-release",
    "sigstore"
]
## Documentation Setup
docs = [
    "doc8",
    "pydocstyle[toml]",
    "Pygments",
    "pyparsing", 
    "sphinx",
    "sphinx-design",
    "sphinxawesome-codelinter",
    "sphinxawesome-theme"
]
## Linting and Formatting Setup
lint = [
    "bandit[toml]",
    "black",
    "flake8",
    "flake8-quotes",
    "flake8-docstring-checker",
    "flake8-pytest-style",
    "flake8-type-checking",
    "flake8-annotations",
    "flake8-broken-line",
    "flake8-eradicate",
    "flake8-fixme",
    "flake8-bugbear",
    "flake8-datetimez",
    "flake8-no-pep420",
    "flake8-comprehensions",
    "flake8-leading-blank-lines",
    "flake8-tidy-imports",
    "flake8-pyi",
    "Flake8-pyproject",
    "isort",
    "mypy",
    "pylint",
    "pyright",
    "restructuredtext-lint"
]
## Testing Setup
test = [
    "coverage[toml]",
    "hypothesis[all]",
    "pytest",
    "pytest-asyncio",
    "pytest-cov", 
    "pytest-tcpclient",
    "pytest-randomly",
    "pytest-xdist"
]

[tool.mesonpep517.metadata]
pkg-info-file = 'PKG-INFO'
summary = "Wrapdb file generator for OZI."

[build-system]
requires = [
    "mesonpep517",
    "ninja",
    "pip-tools",
    "setuptools>=64",
    "setuptools_scm[toml]>=6.2",
    "tomli"
]
build-backend = "mesonpep517.buildapi"

[tool.bandit]
exclude_dirs = ["venv", "meson-private", "tests"]
format = "txt"
ignore_nosec = true
verbose = true

[tool.black]
extend-exclude = "(\\.pyi|meson-private)"
line-length = 93

[tool.coverage.report]
exclude_lines = [
    "#\\s*(pragma|PRAGMA)[:\\s]?\\s*(no|NO)\\s*(cover|COVER)",
    "#\\s*(pragma|PRAGMA)[:\\s]?\\s*(defer|DEFER)\\s*(to|TO)\\s*[a-zA-Z0-9_]*",
    "def __repr__",
    "def __wrapper", # functools.wraps decorated functions
    "(\\.\\.\\.)",
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    "if __name__ == .__main__.:",
    ]
fail_under    = 100.0
show_missing  = true
skip_covered  = true
skip_empty    = true

[tool.coverage.run]
branch         = true
relative_files = true

[tool.flake8]
ban-relative-imports = "parents"
max-line-length = 93
extend-exclude  = ["meson-private", "build-env-*", "venv", "build*", "*.pyi"]
extend-ignore   = "E203,E501"
extend-select   = "B950"

[tool.isort]
line_length = 93
profile = "black"
verbose = true

[tool.mypy]
strict = true
implicit_reexport = true
exclude = [
    '^tests',
]

[tool.pyright]
reportMissingTypeStubs = false
exclude = [ 
    'meson-private',
    'tests'
]

[tool.pytest.ini_options]
filterwarnings = ["error","ignore:The --rsyncdir command line argument and rsyncdirs config variable are deprecated.:DeprecationWarning"]
asyncio_mode = "auto"
log_cli = true
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_level = "INFO"

[tool.semantic_release]
commit_parser                  = "emoji"
major_on_zero                  = false
tag_format                     = "{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "beta"
prerelease = false

[tool.semantic_release.commit_parser_options]
major_tags = [":boom:"]
minor_tags = [
    ":sparkles:",
    ":rocket:",
]
patch_tags = [
    ":children_crossing:",
    ":ambulance:",
    ":lock:",
    ":bug:",
    ":zap:",
    ":goal_net:",
    ":alien:",
    ":wheelchair:",
    ":arrow_down:",
    ":pushpin:",
    ":arrow_up:",
    ":speech_balloon:",
    ":mag:",
    ":apple:",
    ":penguin:",
    ":checkered_flag:",
    ":robot:",
    ":green_heart:",
    ":green_apple:",
    ":recycle:",
    ":wrench:",
    ":hammer:",
    ":pencil2:",
    ":bento:",
    ":bulb:",
    ":label:",
    ":fire:",
]

[tool.semantic_release.changelog]
changelog_file                 = "CHANGELOG.md"

[tool.semantic_release.remote]
token = { env = "GH_TOKEN" }

[tool.semantic_release.publish]
dist_glob_patterns             = ["*.whl","*.tar.gz", "sig/*"]
upload_to_vcs_release          = true

[tool.setuptools_scm]
write_to_template = """Metadata-Version: 2.1
Name: ozi-wrap
Version: {version}
Summary: Wrapdb file generator for OZI.
Home-page: https://oziproject.dev
Requires-Python: >= 3.12, <= 3.10
Keywords: Private,do-no-upload
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Development Status :: 1 - Planning
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Intended Audience :: Other Audience
Classifier: Natural Language :: English
Classifier: Typing :: Typed
Classifier: Environment :: Other Environment
Requires-Dist: requests
Requires-Dist: jinja2
Description-Content-Type: text/x-rst

.. OZI
  Classifier: License-Expression :: Apache-2.0 WITH LLVM-exception
  Classifier: License-File :: LICENSE.txt

..
  Part of OZI.wrap.
  See LICENSE.txt in the project root for details.

========
ozi-wrap
========

.. image:: https://raw.githubusercontent.com/sigstore/community/main/artwork/badge/sigstore_codesigned_purple.png
 :align: right
 :height: 140
 :target: https://www.sigstore.dev/"""
fallback_version = "@MESON_DIST_FALLBACK_VERSION@"
parentdir_prefix_version = "@PROJECT_NAME@-"
tag_regex = "^(?P<prefix>v)?(?P<version>[^\\+]+)(?P<suffix>.*)?$"

[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist = True
envlist = py312,py311,py310

[gh]
python =
   3.10 = py310
   3.11 = py311
   3.12 = py312

[testenv]
package = wheel
deps =
   pip-tools
   meson >= 1.1.0
   setuptools_scm[toml]>=6.2
   tomli >= 2.0.0
commands =
   meson setup {env_tmp_dir} -D{posargs}=enabled --reconfigure
   meson compile -C {env_tmp_dir}
   rm -rf {env_tmp_dir}/.gitignore
   pip install .
   meson test --no-rebuild --maxfail=1 -C {env_tmp_dir} --setup={posargs}
"""